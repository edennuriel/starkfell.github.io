{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clientID": {
      "type": "string",
      "defaultValue": "luma",
      "metadata": {
        "description": "Prefix for the Environment (2-5 characters) related to the Client ID or Name."
      }
    },
    "primaryAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Primary Address prefix."
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Nano Server Subnet Prefix."
      }
    },
    "vNetName": {
      "type": "string",
      "defaultValue": "[concat(parameters('clientID'), '-VNet')]",
      "metadata": {
        "description": "vNet Name."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "[concat(parameters('clientID'), '-Subnet')]",
      "metadata": {
        "description": "Active Directory Subnet Name"
      }
    },
    "nsgName": {
      "type": "string",
      "defaultValue": "[concat(parameters('clientID'), '-nsg-', substring(uniqueString(resourceGroup().id), 0, 2))]",
      "metadata": {
        "description": "Network Security Group for the File Maker Server being deployed."
      }
    },
    "nanoServerServerNicIPAddress": {
      "type": "string",
      "defaultValue": "10.0.1.4",
      "metadata": {
        "description": "The Primary IP address of the new Nano Server being deployed."
      }
    },
    "nanoServerServerPubIPName": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the Public IP Address associated with the Nano Server being deployed."
      },
      "defaultValue": "[concat( parameters('clientID'), '-nanosrv-', substring(uniqueString(resourceGroup().id), 0, 2))]"
    },
    "nanoServerStorageName": {
      "type": "string",
      "defaultValue": "[concat(parameters('clientID'), 'nanosrvstr', substring(uniqueString(resourceGroup().id), 0, 4))]",
      "metadata": {
        "Description": "Name of the Storage Account where the Nano Server is being deployed."
      }
    },
    "nanoServerStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "Description": "The Type of Redundant Storage used for the Nano Server being deployed."
      }
    },
    "nanoServerServerName": {
      "type": "string",
      "defaultValue": "[concat( parameters('clientID'), '-nanosrv-', substring(uniqueString(resourceGroup().id), 0, 2))]",
      "metadata": {
        "Description": "The Name of the Nano Server being deployed."
      }
    },
    "nanoServeradminUsername": {
      "type": "string",
      "defaultValue": "winadmin",
      "metadata": {
        "Description": "The Local Username of the account being created on the Nano Server."
      }
    },
    "nanoServeradminPassword": {
      "type": "securestring",
      "defaultValue": "AlwaysOn!",
      "metadata": {
        "Description": "The Local Password of the account being created on the Nano Server."
      }
    },
    "nanoServerServerImagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "allowedValues": [
        "MicrosoftWindowsServer"
      ],
      "metadata": {
        "description": "The Microsoft Image Publisher of the Image being used for the Nano Server."
      }
    },
    "nanoServerServerImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "allowedValues": [
        "WindowsServer"
      ],
      "metadata": {
        "description": "The Microsoft Image Offer of the Image being used for the Nano Server."
      }
    },
    "nanoServerServerImageSku": {
      "type": "string",
      "defaultValue": "2016-Nano-Server",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "Windows-Server-Technical-Preview",
        "2016-Nano-Server"
      ],
      "metadata": {
        "description": "The Microsoft Image SKU of the Image being used for the Nano Server."
      }
    },
    "nanoServerServerImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "latest"
      ],
      "metadata": {
        "description": "The Version Number of the fully patched Windows Image being deployed."
      }
    },
    "nanoServerServerOSDiskName": {
      "type": "string",
      "defaultValue": "[concat('nano','OSDisk')]",
      "metadata": {
        "description": "The Name of the Nano Server OS Disk."
      }
    },
    "nanoServerServerDataDiskName": {
      "type": "string",
      "defaultValue": "[concat('nano','DataDisk')]",
      "metadata": {
        "description": "The Name of the Nano Server Data Disk."
      }
    },
    "nanoServerServerDataDiskSize": {
      "type": "int",
      "defaultValue": 50,
      "metadata": {
        "description": "The Size of the Nano Server Data Disk in GB."
      }
    },
    "nanoServerServerVMSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A1",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4"
      ],
      "metadata": {
        "description": "The Size of the Nano Server VM being deployed in Azure."
      }
    },
    "nanoServerkeyVaultId": {
      "type": "string",
      "defaultValue": "/subscriptions/84f065f5-e37a-4127-9c82-0b1ecd57a652/resourceGroups/nano-key-vault/providers/Microsoft.KeyVault/vaults/nanokeyvaultd393",
      "metadata": {
        "description": "The Azure Key Vault Id."
      }
    },
    "nanoServerCertificateUrl": {
      "type": "string",
      "defaultValue": "https://nanokeyvaultd393.vault.azure.net/secrets/nanoservers-lumagate-com-cert/5de63e289c714b2a8c4450e0d9144216",
      "metadata": {
        "description": "The Azure Key Vault Id."
      }
    },
    "apiVersion": {
      "type": "string",
      "defaultValue": "2015-06-15",
      "metadata": {
        "description": "The Azure Resource Manager API Version to use during the Deployment."
      }
    }
  },
  "variables": {

  },
  "resources": [
    {
      "name": "[parameters('nanoServerStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('nanoServerStorageName')]"
      },
      "properties": {
        "accountType": "[parameters('nanoServerStorageType')]"
      }
    },
    {
      "name": "[parameters('nanoServerServerPubIPName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('nanoServerServerPubIPName')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('nanoServerServerPubIPName')]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[parameters('nsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-http-inbound",
            "properties": {
              "description": "Allow HTTP through port 80.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-winrm-http-inbound",
            "properties": {
              "description": "Allow WinRM HTTP Traffic through port 5985.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "5985",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-winrm-https-inbound",
            "properties": {
              "description": "Allow WinRM HTTPS Traffic through port 5986.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "5986",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-dotnet-core-app-http-inbound",
            "properties": {
              "description": "Allow .NET Core App HTTP Traffic through port 8000.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('vNetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('nsgName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('primaryAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('nanoServerServerName'), '-NIC')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('nanoServerServerPubIPName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
      ],
      "tags": {
        "displayName": "[concat(parameters('nanoServerServerName'), '-NIC')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(parameters('nanoServerServerName'), '-ipconfig')]",
            "properties": {
              "privateIPAddress": "[parameters('nanoServerServerNicIPAddress')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('nanoServerServerPubIPName'))]"
              },
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName')), '/subnets/', parameters('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[parameters('nanoServerServerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('nanoServerStorageName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nanoServerServerName'), '-NIC')]"
      ],
      "tags": {
        "displayName": "[parameters('nanoServerServerName')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('nanoServerServerVMSize')]"
        },
        "osProfile": {
          "secrets": [
            {
              "sourceVault": { "id": "[parameters('nanoServerkeyVaultId')]" },
              "vaultCertificates": [
                {
                  "certificateUrl": "[parameters('nanoServerCertificateUrl')]",
                  "certificateStore": "My"
                }
              ]
            }
          ],
          "computerName": "[parameters('nanoServerServerName')]",
          "adminUsername": "[parameters('nanoServeradminUsername')]",
          "adminPassword": "[parameters('nanoServeradminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": false,
            "winRM": {
              "listeners": [
                {
                  "protocol": "Https",
                  "certificateUrl": "[parameters('nanoServerCertificateUrl')]"
                }
              ]
            }
          }

        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('nanoServerServerImagePublisher')]",
            "offer": "[parameters('nanoServerServerImageOffer')]",
            "sku": "[parameters('nanoServerServerImageSku')]",
            "version": "[parameters('nanoServerServerImageVersion')]"
          },
          "osDisk": {
            "name": "[parameters('nanoServerServerOSDiskName')]",
            "vhd": {
              "uri": "[concat('http://', parameters('nanoServerStorageName'), '.blob.core.windows.net/vhds', '/', parameters('nanoServerServerOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://', parameters('nanoServerStorageName'), '.blob.core.windows.net/vhds', '/', parameters('nanoServerServerDataDiskName'),'-F.vhd')]"
              },
              "name": "[concat(parameters('nanoServerServerName'),'-F')]",
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "[parameters('nanoServerServerDataDiskSize')]",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('nanoServerServerName'), '-NIC'))]",
              "properties": { "primary": true }
            }
          ]
        }
      },
      "resources": [
      ]
    }
  ]
}