{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clientID": {
      "type": "string",
      "minLength": 2,
      "maxLength": 5,
      "defaultValue": "rei",
      "metadata": {
        "description": "Prefix for the Environment (2-5 characters) related to the Client ID or Name."
      }
    },
    "primaryAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Primary Address prefix."
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Ambari Server Subnet Prefix."
      }
    },
    "ambariServerNicIPAddress": {
      "type": "string",
      "defaultValue": "10.0.1.4",
      "metadata": {
        "description": "The Primary IP address of the new Ambari Server being deployed."
      }
    },
    "ambariServerStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "Description": "The Type of Redundant Storage used for the Ambari Server being deployed."
      }
    },
    "ambariServerAdminUsername": {
      "type": "string",
      "defaultValue": "linuxadmin",
      "metadata": {
        "Description": "The Local Username of the account being created on the Ambari Server."
      }
    },
    "ambariServerAdminPassword": {
      "type": "securestring",
      "defaultValue": "DataMein1!",
      "metadata": {
        "Description": "The Local Password of the account being created on the Ambari Server."
      }
    },
    "ambariServerImagePublisher": {
      "type": "string",
      "defaultValue": "OpenLogic",
      "allowedValues": [
        "OpenLogic",
        "Canonical"
      ],
      "metadata": {
        "description": "The Publisher of the Linux Image being used for the Ambari Server."
      }
    },
    "ambariServerImageOffer": {
      "type": "string",
      "defaultValue": "CentOS",
      "allowedValues": [
        "CentOS",
        "UbuntuServer"
      ],
      "metadata": {
        "description": "The Linux Image Offer used for the Ambari Server."
      }
    },
    "ambariServerImageSku": {
      "type": "string",
      "defaultValue": "6.6",
      "allowedValues": [
        "6.5",
        "6.6",
        "14.04.2-LTS",
        "16.04-LTS"
      ],
      "metadata": {
        "description": "The Linux Image SKU used for the Ambari Server."
      }
    },
    "ambariServerImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "latest"
      ],
      "metadata": {
        "description": "The Version Number of the fully patched Linux Image being deployed."
      }
    },
    "ambariServerDataDiskSize": {
      "type": "int",
      "defaultValue": 50,
      "metadata": {
        "description": "The Size of the Ambari Server Data Disk in GB."
      }
    },
    "ambariServerVMSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4"
      ],
      "metadata": {
        "description": "The Size of the Ambari Server VM being deployed in Azure."
      }
    },
    "dataNodeInstances": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of DataNode Instances being deployed."
      }
    },
    "dataNodeStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "The type of the Storage Account(s) being created for the DataNode Instances."
      }
    },
    "dataNodeAdminUsername": {
      "type": "string",
      "defaultValue": "linuxadmin",
      "metadata": {
        "Description": "The Local Username of the account being created on the DataNode Instance."
      }
    },
    "dataNodeAdminPassword": {
      "type": "securestring",
      "defaultValue": "DataMein1!",
      "metadata": {
        "Description": "The Local Password of the account being created on the DataNode Instance."
      }
    },
    "dataNodeImagePublisher": {
      "type": "string",
      "defaultValue": "OpenLogic",
      "allowedValues": [
        "OpenLogic",
        "Canonical"
      ],
      "metadata": {
        "description": "The Publisher of the Linux Image being used for the DataNode Instance."
      }
    },
    "dataNodeImageOffer": {
      "type": "string",
      "defaultValue": "CentOS",
      "allowedValues": [
        "CentOS",
        "UbuntuServer"
      ],
      "metadata": {
        "description": "The Linux Image Offer used for the DataNode Instance."
      }
    },
    "dataNodeImageSku": {
      "type": "string",
      "defaultValue": "6.6",
      "allowedValues": [
        "6.5",
        "6.6",
        "14.04.2-LTS",
        "16.04-LTS"
      ],
      "metadata": {
        "description": "The Linux Image SKU used for the DataNode Instance."
      }
    },
    "dataNodeImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "latest"
      ],
      "metadata": {
        "description": "The Version Number of the fully patched Linux Image being deployed."
      }
    },
    "dataNodeDataDiskSize": {
      "type": "int",
      "defaultValue": 50,
      "metadata": {
        "description": "The Size of the DataNode Instance Data Disk in GB."
      }
    },
    "dataNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4"
      ],
      "metadata": {
        "description": "The Size of the DataNode Instance VM being deployed in Azure."
      }
    },
    "apiVersion": {
      "type": "string",
      "defaultValue": "2015-06-15",
      "metadata": {
        "description": "The Azure Resource Manager API Version to use during the Deployment."
      }
    }
  },
  "variables": {
    "vNetName": "[concat(parameters('clientID'), '-VNet')]",
    "subnetName": "[concat(parameters('clientID'), '-Subnet')]",
    "ambariServerNsgName": "[concat(parameters('clientID'), '-nsg-', substring(uniqueString(resourceGroup().id), 0, 2))]",
    "ambariServerPubIPName": "[concat(parameters('clientID'), '-ambarisrv-', substring(uniqueString(resourceGroup().id), 0, 2))]",
    "ambariServerStorageName": "[concat(parameters('clientID'), 'ambarisrvstr', substring(uniqueString(resourceGroup().id), 0, 4))]",
    "ambariServerName": "[concat(parameters('clientID'), '-ambarisrv-', substring(uniqueString(resourceGroup().id), 0, 2))]",
    "ambariServerOSDiskName": "[concat(variables('ambariServerName'), '-OSDisk')]",
    "ambariServerDataDiskName": "[concat(variables('ambariServerName'), '-DataDisk')]",
    "dataNodeStorageName": "[concat(parameters('clientID'), 'datanodestr', substring(uniqueString(resourceGroup().id), 0, 4))]",
    "dataNodeName": "[concat(parameters('clientID'), '-datanode-', substring(uniqueString(resourceGroup().id), 0, 2))]",
    "dataNodeOSDiskName": "[concat(variables('dataNodeName'), '-OSDisk')]",
    "dataNodeDataDiskName": "[concat(variables('dataNodeName'), '-DataDisk')]"

  },
  "resources": [
    {
      "name": "[variables('ambariServerStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "[variables('ambariServerStorageName')]"
      },
      "properties": {
        "accountType": "[parameters('ambariServerStorageType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('dataNodeStorageName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "dataNodeStorageAccounts"
      },
      "copy": {
        "name": "dataNodeStorageLoop",
        "count": "[parameters('dataNodeInstances')]"
      },
      "properties": {
        "accountType": "[parameters('dataNodeStorageAccountType')]"
      }
    },
    {
      "name": "[variables('ambariServerPubIPName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "[variables('ambariServerPubIPName')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('ambariServerPubIPName')]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('ambariServerNsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-ssh-inbound",
            "properties": {
              "description": "Allow SSH traffic through port 22.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-ambari-rm-inbound",
            "properties": {
              "description": "Allow Ambari Server Web UI traffic through port 8080.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('ambariServerNsgName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('primaryAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ambariServerNsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('ambariServerName'), '-NIC')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('ambariServerPubIPName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]"
      ],
      "tags": {
        "displayName": "[concat(variables('ambariServerName'), '-NIC')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('ambariServerName'), '-ipconfig')]",
            "properties": {
              "privateIPAddress": "[parameters('ambariServerNicIPAddress')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('ambariServerPubIPName'))]"
              },
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '/subnets/', variables('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('dataNodeName'), '-NIC-', copyindex())]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "copy": {
        "name": "dataNodeNICLoop",
        "count": "[parameters('dataNodeInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('ambariServerName'), '-NIC')]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]"
      ],
      "tags": {
        "displayName": "dataNodeNICs"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "primary-ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '/subnets/', variables('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('ambariServerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('ambariServerStorageName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('ambariServerName'), '-NIC')]"
      ],
      "tags": {
        "displayName": "[variables('ambariServerName')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('ambariServerVMSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ambariServerName')]",
          "adminUsername": "[parameters('ambariServerAdminUsername')]",
          "adminPassword": "[parameters('ambariServerAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('ambariServerImagePublisher')]",
            "offer": "[parameters('ambariServerImageOffer')]",
            "sku": "[parameters('ambariServerImageSku')]",
            "version": "[parameters('ambariServerImageVersion')]"
          },
          "osDisk": {
            "name": "[variables('ambariServerOSDiskName')]",
            "vhd": {
              "uri": "[concat('http://', variables('ambariServerStorageName'), '.blob.core.windows.net/vhds', '/', variables('ambariServerOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://', variables('ambariServerStorageName'), '.blob.core.windows.net/vhds', '/', variables('ambariServerDataDiskName'),'.vhd')]"
              },
              "name": "[concat(variables('ambariServerName'))]",
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "[parameters('ambariServerDataDiskSize')]",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('ambariServerName'), '-NIC'))]",
              "properties": { "primary": true }
            }
          ]
        }
      },
      "resources": [
      ]
    },
    {
      "name": "[concat(variables('dataNodeName'), copyindex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "copy": {
        "name": "dataNodeVMLoop",
        "count": "[parameters('dataNodeInstances')]"
      },
      "dependsOn": [
        "dataNodeStorageLoop",
        "dataNodeNICLoop",
        "[concat('Microsoft.Compute/virtualMachines/', variables('ambariServerName'))]"
      ],
      "tags": {
        "displayName": "dataNodeVMs"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('dataNodeVMSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('dataNodeName'), copyindex())]",
          "adminUsername": "[parameters('dataNodeAdminUsername')]",
          "adminPassword": "[parameters('dataNodeAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('dataNodeImagePublisher')]",
            "offer": "[parameters('dataNodeImageOffer')]",
            "sku": "[parameters('dataNodeImageSku')]",
            "version": "[parameters('dataNodeImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('dataNodeName'), copyIndex(), '-', variables('dataNodeOSDiskName'))]",
            "vhd": {
              "uri": "[concat('http://', variables('dataNodeStorageName'), copyIndex(), '.blob.core.windows.net/vhds', '/', variables('dataNodeOSDiskName'), copyindex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://', variables('dataNodeStorageName'), copyIndex(), '.blob.core.windows.net/vhds', '/', variables('dataNodeDataDiskName'), copyindex(), '.vhd')]"
              },
              "name": "[concat(variables('ambariServerName'))]",
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "[parameters('dataNodeDataDiskSize')]",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('dataNodeName'), '-NIC-', copyindex()))]"
            }
          ]
        }
      }
    }
  ]
}